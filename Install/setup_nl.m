function setup_nl()

% Runs the installation procedure with nl_nl as default language.

%--------------------------------------------------------------------------
% Etienne Gaudrain <etienne.gaudrain@cnrs.fr> - 2018-05-02
% CNRS UMR 5292, FR | University of Groningen, UMCG, NL
%--------------------------------------------------------------------------

fprintf('First select the SOURCE folder.\nThis is the (Google Drive) folder that contains the master code of PICKA. It should be called "PICKA Experiments".\n(Press Enter to continue)\n\n');
pause();

src = uigetdir(fullfile(getHome(), 'Google Drive'), 'PICKA installation: Source directory (Google Drive)');

if src(1)==0
    error('No source folder was selected');
end

fprintf('Source folder: %s\n\n', src);

fprintf('Then select the DESTINATION folder.\nNo new "PICKA Experiments" folder will be created. All the code will be installed directly in the selected folder.\n');
fprintf('This is where you will be running your experiments from.\n(Press Enter to continue)\n\n');
pause();

dst = uigetdir(pwd(),'PICKA installation: Destination directory');

if dst(1)==0
    error('No destination folder was selected');
end

fprintf('Destination folder: %s\n\n', dst);

fprintf('Are you sure you want to install from the source to the destination folder?\n');
r = input('yes | no: ', 's');

r = lower(r(1));

switch r
    case 'y'
        if ~exist('manage_picka.py', 'file')
            py_code = base64decode(payload());
            f = fopen('manage_picka.py', 'w');
            fwrite(f,py_code);
            fclose(f);
        end
        %[c, ~] = system(sprintf('python ./manage_picka.py install "%s" "%s"', src, dst), '-echo');
        mod = py.importlib.import_module('manage_picka');
        py.reload(mod);
        fprintf('\n\n');
        success = py.manage_picka.main(py.list({'install', src, dst, 'nl_nl'}));
        if success==0
            try
                delete('manage_picka.p*', 'setup_nl.m');
            catch
            end
        end
        
    otherwise
        fprintf('\nInstallation aborted.\n');
end

%------------------------------------------
function home = getHome()
% return the path to the home folder indepently of OS (e.g. works in Linux,
% apple, and windows)
 
if ispc
    home = fullfile(getenv('HOMEDRIVE'), getenv('HOMEPATH'));
else
    home = getenv('HOME');
end

%------------------------------------------
function y = base64decode(x)

x = uint8(x(:));

base64 = org.apache.commons.codec.binary.Base64;
y = base64.decode(x);
y = char(mod(int16(y),256))';

%------------------------------------------
% The function below is generated by calling
%   python make_setup.py setup_nl.m manage_picka.py
% Do not edit manually.
function x = payload()

x = 'IyEvdXNyL2Jpbi9lbnYgcHl0aG9uCiMtKi0gY29kaW5nOiB1dGYtOCAtKi0KCiMgU29tZSBmdW5jdGlvbnMgdG8gaW5zdGFsbCBhbmQgbWFuYWdlIHRoZSBQSUNLQSBzb3VyY2UgY29kZS4gVGhlc2UgYXJlIGNhbGxlZAojIGZyb20gTWF0bGFiJ3Mgc2V0dXBfbmwubSBhbmQgc2V0dXBfZ2IubS4gSW4gZmFjdCwgdGhlIHNvdXJjZSBjb2RlIGlzIGluY2x1ZGVkCiMgaW4gYmFzZTY0IGZvcm0gaW50byB0aGUgTWF0bGFiIGZpbGUgaXRzZWxmIHRoYW5rcyB0byBtYWtlX3NldHVwLnB5LgoKIy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCiMgRXRpZW5uZSBHYXVkcmFpbiA8ZXRpZW5uZS5nYXVkcmFpbkBjbnJzLmZyPiAtIDIwMTgtMDUtMDIKIyBDTlJTIFVNUiA1MjkyLCBGUiB8IFVuaXZlcnNpdHkgb2YgR3JvbmluZ2VuLCBVTUNHLCBOTAojLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCmltcG9ydCBzaHV0aWwsIG9zLCBzeXMsIHppcGZpbGUsIHRpbWUsIHNvY2tldCwgZm5tYXRjaAoKIyBJZiB3ZSB3YW50IHRvIGNvcHkgdG8gYSB6aXAgZmlsZQpjbGFzcyBhcmNoaXZlX3ppcDoKICAgIGRlZiBfX2luaXRfXyhzZWxmLCB6aXBfZmlsZW5hbWUsIHBhdGhfbWFuZ2xlKToKICAgICAgICBzZWxmLl9maWxlID0gemlwZmlsZS5aaXBGaWxlKHppcF9maWxlbmFtZSwgJ3cnLCB6aXBmaWxlLlpJUF9ERUZMQVRFRCkKICAgICAgICBzZWxmLnBhdGhfbWFuZ2xlID0gcGF0aF9tYW5nbGUgIyBXZSB3aWxsIG1hbmdsZSB0aGF0IHdoZW4gc3RvcmluZyBmaWxlcwoKICAgIGRlZiBhZGQoc2VsZiwgZmlsZW5hbWUpOgogICAgICAgIHNlbGYuX2ZpbGUud3JpdGUoZmlsZW5hbWUsIGZpbGVuYW1lLnJlcGxhY2Uoc2VsZi5wYXRoX21hbmdsZSwgJycsIDEpKQoKICAgIGRlZiBjbG9zZShzZWxmKToKICAgICAgICBzZWxmLl9maWxlLmNsb3NlKCkKCiMgSWYgd2Ugd2FudCB0byBjb3B5IHRvIGEgZm9sZGVyCmNsYXNzIGFyY2hpdmVfZm9sZGVyOgogICAgZGVmIF9faW5pdF9fKHNlbGYsIGZvbGRlcm5hbWUsIHBhdGhfbWFuZ2xlKToKICAgICAgICBzZWxmLmZvbGRlcm5hbWUgPSBmb2xkZXJuYW1lCiAgICAgICAgc2VsZi5wYXRoX21hbmdsZSA9IHBhdGhfbWFuZ2xlCgogICAgZGVmIGFkZChzZWxmLCBmaWxlbmFtZSk6CiAgICAgICAgZHN0ID0gb3MucGF0aC5qb2luKHNlbGYuZm9sZGVybmFtZSwgZmlsZW5hbWUucmVwbGFjZShvcy5wYXRoLmpvaW4oc2VsZi5wYXRoX21hbmdsZSwnJyksICcnLCAxKSkKICAgICAgICBwLCBmID0gb3MucGF0aC5zcGxpdChkc3QpCiAgICAgICAgaWYgbm90IG9zLnBhdGguaXNkaXIocCk6CiAgICAgICAgICAgIG9zLm1ha2VkaXJzKHApCiAgICAgICAgc2h1dGlsLmNvcHkyKGZpbGVuYW1lLCBkc3QpCgogICAgZGVmIGNsb3NlKHNlbGYpOgogICAgICAgIHBhc3MKCmRlZiBzbmFwc2hvdChpbnN0YWxsX2Rpciwgc25hcHNob3RfZGlyLCBjb2RlX29ubHk9VHJ1ZSwgY29tcHJlc3M9VHJ1ZSk6CiAgICAjIGluc3RhbGxfZGlyIGlzIHRoZSBwYXRoIG9mIHRoZSBpbnN0YWxsYXRpb24gd2Ugd2FudCBhIHNuYXBzaG90IG9mCiAgICAjIHNuYXBzaG90X2RpciBpcyB3aGVyZSB3ZSB3YW50IHRoZSBzbmFwc2hvdCBzdG9yZWQ7IHRoaXMgaXMgYSB0b3AgZGlyZWN0b3J5LCB0aGUgZXhhY3QgdGFyZ2V0IG5hbWUgd2lsbCBiZSBnZW5lcmF0ZWQKICAgIGlmIGNvbXByZXNzOgogICAgICAgIHppcF9maWxlbmFtZSA9IG9zLnBhdGguam9pbihzbmFwc2hvdF9kaXIsICIlc18lcy56aXAiICUgKHRpbWUuc3RyZnRpbWUoIiVZLSVtLSVkXyVIJU0lUyIpLCBzb2NrZXQuZ2V0aG9zdG5hbWUoKSkpCiAgICAgICAgZHN0ID0gYXJjaGl2ZV96aXAoemlwX2ZpbGVuYW1lLCBpbnN0YWxsX2RpcikKICAgIGVsc2U6CiAgICAgICAgZm9sZGVybmFtZSA9IG9zLnBhdGguam9pbihzbmFwc2hvdF9kaXIsICIlc18lcyIgJSAodGltZS5zdHJmdGltZSgiJVktJW0tJWRfJUglTSVTIiksIHNvY2tldC5nZXRob3N0bmFtZSgpKSkKICAgICAgICBkc3QgPSBhcmNoaXZlX2ZvbGRlcihmb2xkZXJuYW1lLCBpbnN0YWxsX2RpcikKCiAgICBpZiBjb2RlX29ubHk6CiAgICAgICAgY29weXRyZWUoaW5zdGFsbF9kaXIsIGRzdCwgWycqLm0nLCAnKi5weSddKQogICAgZWxzZToKICAgICAgICBjb3B5dHJlZShpbnN0YWxsX2RpciwgZHN0LCBbJyoubScsICcqLnB5JywgJyoud2F2JywgJyoucG5nJywgJyouanBnJywgJyoubWQnLCAnKi5odG1sJ10sIFsndG1wJ10pCgpkZWYgY29weXRyZWUoc3JjLCBkc3QsIHBhdHRlcm5zLCBleGNsdWRlPVtdKToKICAgICMgcGF0dGVybnMgYXJlIGluY2x1ZGVkCiAgICBmb3IgKGRpcnBhdGgsIGRpcm5hbWVzLCBmaWxlbmFtZXMpIGluIG9zLndhbGsoc3JjKToKICAgICAgICBkb190aGlzX2RpcnBhdGggPSBUcnVlCiAgICAgICAgZm9yIHAgaW4gZGlycGF0aC5yZXBsYWNlKGRzdC5wYXRoX21hbmdsZSwgJycpLnNwbGl0KG9zLnNlcCk6CiAgICAgICAgICAgIGlmIHAgaW4gZXhjbHVkZToKICAgICAgICAgICAgICAgIGRvX3RoaXNfZGlycGF0aCA9IEZhbHNlCiAgICAgICAgICAgICAgICBicmVhawogICAgICAgIGlmIG5vdCBkb190aGlzX2RpcnBhdGg6CiAgICAgICAgICAgIGNvbnRpbnVlCiAgICAgICAgZm9yIGYgaW4gZmlsZW5hbWVzOgogICAgICAgICAgICBmb3IgcCBpbiBwYXR0ZXJuczoKICAgICAgICAgICAgICAgIGlmIGZubWF0Y2guZm5tYXRjaChmLCBwKToKICAgICAgICAgICAgICAgICAgICBkc3QuYWRkKG9zLnBhdGguam9pbihkaXJwYXRoLCBmKSkKICAgICAgICAgICAgICAgICAgICBicmVhawoKZGVmIGluc3RhbGwoc3JjLCBkc3QsIGxhbmcpOgogICAgbG9nID0gW10KICAgIGVycm9ycyA9IFtdCiAgICAjIElmIGRzdCBpcyBub3QgZW1wdHksIHdlIHRha2UgYSBzbmFwc2hvdAogICAgaWYgb3MucGF0aC5pc2Rpcihkc3QpIGFuZCBsZW4ob3MubGlzdGRpcihkc3QpKT4wOgogICAgICAgIGxvZy5hcHBlbmQoJ1RoZSB0YXJnZXQgZGlyZWN0b3J5ICIlcyIgYWxyZWFkeSBleGlzdHMgYW5kIGlzIG5vdCBlbXB0eSwgc28gd2UgYXJlIHRha2luZyBhIHNuYXBzaG90IG9mIGl0LicgJSBkc3QpCiAgICAgICAgc25hcHNob3RfZGlyID0gb3MucGF0aC5qb2luKHNyYywgJ1NuYXBzaG90cycpCiAgICAgICAgaWYgbm90IG9zLnBhdGguaXNkaXIoc25hcHNob3RfZGlyKToKICAgICAgICAgICAgb3MubWFrZWRpcnMoc25hcHNob3RfZGlyKQogICAgICAgIHRyeToKICAgICAgICAgICAgbG9nLmFwcGVuZCgnVGFraW5nIGEgc25hcHNob3Qgb2YgIiVzIiB0byAiJXMiLi4uJyAlIChkc3QsIHNuYXBzaG90X2RpcikpCiAgICAgICAgICAgIHNuYXBzaG90KGRzdCwgc25hcHNob3RfZGlyLCBGYWxzZSwgVHJ1ZSkKICAgICAgICAgICAgbG9nLmFwcGVuZCgnU25hcHNob3QgZG9uZS4nKQogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24sIGU6CiAgICAgICAgICAgIGxvZy5hcHBlbmQoIlRoZSBzbmFwc2hvdCBvZiBcIiVzXCIgY291bGRuJ3QgYmUgdGFrZW4uLi4iKQogICAgICAgICAgICBlcnJvcnMuYXBwZW5kKGUpCiAgICAgICAgICAgIHJldHVybiBsb2csIGVycm9ycwoKICAgIGRzdGEgPSBhcmNoaXZlX2ZvbGRlcihkc3QsIHNyYykKICAgIHRyeToKICAgICAgICBsb2cuYXBwZW5kKCJDb3B5aW5nIGZpbGVzIGZyb20gXCIlc1wiIHRvIFwiJXNcIi4uLiIgJSAoc3JjLGRzdCkpCiAgICAgICAgY29weXRyZWUoc3JjLCBkc3RhLCBbJyoubScsICcqLnB5JywgJyoud2F2JywgJyoucG5nJywgJyouanBnJywgJyoubWQnLCAnKi5tZXgqJ10sIFsndG1wJ10pCiAgICAgICAgbG9nLmFwcGVuZCgnVGhlIGNvcHkgaGFzIHN1Y2NlZWRlZC4nKQogICAgICAgICMgUmVtb3ZlIHRoZSBsYW5ndWFnZSBmaWxlcyB0aGF0IGFyZSBub3QgbmVlZGVkCgogICAgZXhjZXB0IEV4Y2VwdGlvbixlOgogICAgICAgIGxvZy5hcHBlbmQoIkFuIGVycm9yIG9jY3VyZWQgZHVyaW5nIHRoZSBjb3B5LiIpCiAgICAgICAgZXJyb3JzLmFwcGVuZChlKQoKICAgIGxvZ19sLCBlcnJvcnNfbCA9IGxvY2FsaXplKGRzdCwgbGFuZykKICAgIGxvZy5leHRlbmQobG9nX2wpCiAgICBlcnJvcnMuZXh0ZW5kKGVycm9yc19sKQoKICAgIHJldHVybiBsb2csIGVycm9ycwoKIz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQpkZWYgbG9jYWxpemUoZHN0LCBsYW5nKToKICAgIGxvZyA9IFtdCiAgICBlcnJvcnMgPSBbXQogICAgdHJ5OgogICAgICAgIGYgPSBvcGVuKG9zLnBhdGguam9pbihkc3QsICdFeHBlcmltZW50cycsICdkZWZhdWx0X3BhcnRpY2lwYW50Lm0nKSwgJ3JiJykKICAgICAgICBuZiA9IFtdCiAgICAgICAgZm9yIGwgaW4gZjoKICAgICAgICAgICAgaWYgbC5zdHJpcCgpLnN0YXJ0c3dpdGgoJ3BhcnRpY2lwYW50Lmxhbmd1YWdlID0gJyk6CiAgICAgICAgICAgICAgICBuZi5hcHBlbmQoIiAgICBwYXJ0aWNpcGFudC5sYW5ndWFnZSA9ICclcyc7IiAlIGxhbmcpCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBuZi5hcHBlbmQobCkKICAgICAgICBmLmNsb3NlKCkKICAgICAgICBvcGVuKG9zLnBhdGguam9pbihkc3QsICdFeHBlcmltZW50cycsICdkZWZhdWx0X3BhcnRpY2lwYW50Lm0nKSwgJ3diJykud3JpdGUoJ1xuJy5qb2luKG5mKSkKICAgIGV4Y2VwdCBFeGNlcHRpb24sZToKICAgICAgICBsb2cuYXBwZW5kKCJBbiBlcnJvciBvY2N1cmVkIGR1cmluZyB0aGUgY29weS4iKQogICAgICAgIGVycm9ycy5hcHBlbmQoZSkKCiAgICByZXR1cm4gbG9nLCBlcnJvcnMKCiM9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KCmRlZiBtYWluKGFyZ3YpOgoKICAgICMgVGVzdCBvZiB0aGUgZnVuY3Rpb25zCiAgICAjIHNyYyA9IG9zLnBhdGguZXhwYW5kdXNlcigifi9Tb3VyY2VzL3RtcC90ZXN0X3BpY2thX3NuYXBzaG90cy9zcmMiKQogICAgIyBkc3QgPSBvcy5wYXRoLmV4cGFuZHVzZXIoIn4vU291cmNlcy90bXAvdGVzdF9waWNrYV9zbmFwc2hvdHMvc25hcHNob3RzIikKICAgICMgc25hcHNob3Qoc3JjLCBkc3QsIEZhbHNlLCBGYWxzZSkKCiAgICBpZiBsZW4oYXJndik8MzoKICAgICAgICBwcmludCAiWW91IG5lZWQgdG8gcHJvdmlkZSBhIGNvbW1hbmQgZm9sbG93ZWQgYnkgdHdvIHBhdGggbmFtZXMuIgogICAgICAgIHJldHVybiAxCgogICAgaWYgYXJndlswXSBub3QgaW4gWydpbnN0YWxsJywgJ3NuYXBzaG90J106CiAgICAgICAgcHJpbnQgIlRoZSB2YWxpZCBjb21tYW5kcyBhcmUgJ2luc3RhbGwnIGFuZCAnc25hcHNob3QnLiIKICAgICAgICByZXR1cm4gMgoKICAgIGlmIGFyZ3ZbMF09PSdpbnN0YWxsJzoKICAgICAgICBsb2csIGVycm9ycyA9IGluc3RhbGwoYXJndlsxXSwgYXJndlsyXSwgYXJndlszXSkKICAgICAgICBwcmludCAiXG4iLmpvaW4obG9nKQogICAgICAgIGlmIGxlbihlcnJvcnMpPjA6CiAgICAgICAgICAgIHByaW50ICItLS1FcnJvcnM6IgogICAgICAgICAgICBwcmludCAiXG4iLmpvaW4oW3N0cihlKSBmb3IgZSBpbiBlcnJvcnNdKQogICAgICAgICAgICByZXR1cm4gMwogICAgZWxpZiBhcmd2WzBdPT0nc25hcHNob3QnOgogICAgICAgIHNuYXBzaG90KGFyZ3ZbMV0sIGFyZ3ZbMl0pCgogICAgcmV0dXJuIDAKCiM9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KCmlmIF9fbmFtZV9fPT0nX19tYWluX18nOgogICAgbWFpbihzeXMuYXJndlsxOl0pCg==';
